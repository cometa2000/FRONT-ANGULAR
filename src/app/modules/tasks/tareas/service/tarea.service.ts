import { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { BehaviorSubject, finalize, Observable, tap, catchError, throwError } from 'rxjs';
import { URL_SERVICIOS } from 'src/app/config/config';
import { AuthService } from 'src/app/modules/auth';

@Injectable({
  providedIn: 'root'
})
export class TareaService {
  
  isLoading$: Observable<boolean>;
  isLoadingSubject: BehaviorSubject<boolean>;
  
  constructor(
    private http: HttpClient,
    public authservice: AuthService,
  ) {
    this.isLoadingSubject = new BehaviorSubject<boolean>(false);
    this.isLoading$ = this.isLoadingSubject.asObservable();
  }

  // =============================
  // üîß M√âTODO PRIVADO PARA HEADERS
  // =============================
  private getHeaders(): HttpHeaders {
    return new HttpHeaders({
      'Authorization': 'Bearer ' + this.authservice.token,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    });
  }

  // =============================
  // üîß M√âTODO PRIVADO PARA MANEJO DE ERRORES
  // =============================
  private handleError(error: HttpErrorResponse) {
    console.error('‚ùå Error HTTP:', error);
    
    let errorMessage = 'Ocurri√≥ un error desconocido';
    
    if (error.error instanceof ErrorEvent) {
      // Error del lado del cliente
      errorMessage = `Error: ${error.error.message}`;
    } else {
      // Error del lado del servidor
      errorMessage = `C√≥digo de error: ${error.status}\nMensaje: ${error.message}`;
      
      if (error.status === 0) {
        errorMessage = 'No se pudo conectar con el servidor. Verifica tu conexi√≥n a internet.';
      } else if (error.status === 401) {
        errorMessage = 'No autorizado. Por favor, inicia sesi√≥n nuevamente.';
      } else if (error.status === 404) {
        errorMessage = 'Recurso no encontrado.';
      } else if (error.status === 500) {
        errorMessage = 'Error interno del servidor.';
      }
    }
    
    console.error('üìÑ Mensaje de error:', errorMessage);
    return throwError(() => ({ ...error, userMessage: errorMessage }));
  }

  // =============================
  // üìñ M√âTODO SHOW - VER TAREA
  // =============================
  show(tareaId: string): Observable<any> {
    console.log('üåê TareaService.show - Iniciando petici√≥n para tarea:', tareaId);
    
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/tareas/${tareaId}`;
    
    console.log('üåê URL completa:', URL);
    console.log('üåê Headers:', headers.keys());
    
    return this.http.get(URL, { headers }).pipe(
      tap((response: any) => {
        console.log('‚úÖ TareaService.show - Respuesta exitosa:', response);
      }),
      catchError((error) => {
        console.error('‚ùå TareaService.show - Error en la petici√≥n:', error);
        return this.handleError(error);
      }),
      finalize(() => {
        console.log('üèÅ TareaService.show - Petici√≥n finalizada');
        this.isLoadingSubject.next(false);
      })
    );
  }

  // =============================
  // üîÑ M√âTODO UPDATE - ACTUALIZAR TAREA
  // =============================
  update(tareaId: string, data: any): Observable<any> {
    console.log('üåê TareaService.update - Actualizando tarea:', tareaId, data);
    
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/tareas/${tareaId}`;
    
    return this.http.put(URL, data, { headers }).pipe(
      tap((response: any) => {
        console.log('‚úÖ TareaService.update - Actualizaci√≥n exitosa:', response);
      }),
      catchError(this.handleError),
      finalize(() => this.isLoadingSubject.next(false))
    );
  }

  // =============================
  // ‚ûï M√âTODO REGISTER - CREAR TAREA
  // =============================
  registerTarea(data: any) {
    console.log('üåê TareaService.registerTarea - Creando tarea:', data);
    
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/tareas`;
    
    return this.http.post(URL, data, { headers }).pipe(
      tap((response: any) => {
        console.log('‚úÖ TareaService.registerTarea - Tarea creada:', response);
      }),
      catchError(this.handleError),
      finalize(() => this.isLoadingSubject.next(false))
    );
  }
  
  // =============================
  // üìã M√âTODO LIST LISTAS
  // =============================
  listListas(grupo_id?: number) {
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    
    let URL = `${URL_SERVICIOS}/listas`;
    if (grupo_id) {
      URL += `?grupo_id=${grupo_id}`;
    }
    
    console.log('üåê URL de petici√≥n listas:', URL);
    
    return this.http.get(URL, { headers }).pipe(
      catchError(this.handleError),
      finalize(() => this.isLoadingSubject.next(false))
    );
  }

  // =============================
  // üìã M√âTODO LIST TAREAS
  // =============================
  listTareas(page = 1, search: string = '') {
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/tareas?page=${page}&search=${search}`;
    
    return this.http.get(URL, { headers }).pipe(
      catchError(this.handleError),
      finalize(() => this.isLoadingSubject.next(false))
    );
  }
  
  // =============================
  // ‚öôÔ∏è M√âTODO CONFIG
  // =============================
  configAll() {
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/tareas/config`;
    
    return this.http.get(URL, { headers }).pipe(
      catchError(this.handleError),
      finalize(() => this.isLoadingSubject.next(false))
    );
  }
  
  // =============================
  // üîÑ M√âTODO UPDATE TAREA (Alternativo)
  // =============================
  updateTarea(ID_TAREA: string | number, data: any) {
    console.log('üåê TareaService.updateTarea - Actualizando:', ID_TAREA, data);
    
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/tareas/${ID_TAREA}`;
    
    return this.http.put(URL, data, { headers }).pipe(
      tap((response: any) => {
        console.log('‚úÖ TareaService.updateTarea - Actualizaci√≥n exitosa:', response);
      }),
      catchError(this.handleError),
      finalize(() => this.isLoadingSubject.next(false))
    );
  }

  // =============================
  // üóëÔ∏è M√âTODO DELETE TAREA
  // =============================
  deleteTarea(ID_TAREA: string) {
    console.log('üåê TareaService.deleteTarea - Eliminando:', ID_TAREA);
    
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/tareas/${ID_TAREA}`;
    
    return this.http.delete(URL, { headers }).pipe(
      tap((response: any) => {
        console.log('‚úÖ TareaService.deleteTarea - Eliminaci√≥n exitosa:', response);
      }),
      catchError(this.handleError),
      finalize(() => this.isLoadingSubject.next(false))
    );
  }

  // =============================
  // üóëÔ∏è M√âTODO DELETE LISTA
  // =============================
  deleteLista(ID_LISTA: string) {
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/listas/${ID_LISTA}`;
    
    return this.http.delete(URL, { headers }).pipe(
      catchError(this.handleError),
      finalize(() => this.isLoadingSubject.next(false))
    );
  }

  // =============================
  // ‚ûï M√âTODO REGISTER LISTA
  // =============================
  registerLista(data: any) {
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/listas`;
    
    console.log('üåê Registrando lista con datos:', data);
    
    return this.http.post(URL, data, { headers }).pipe(
      catchError(this.handleError),
      finalize(() => this.isLoadingSubject.next(false))
    );
  }

  // =============================
  // üîÑ M√âTODO UPDATE LISTA
  // =============================
  updateLista(ID_LISTA: string, data: any) {
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/listas/${ID_LISTA}`;
    
    return this.http.put(URL, data, { headers }).pipe(
      catchError(this.handleError),
      finalize(() => this.isLoadingSubject.next(false))
    );
  }

  // =============================
  // üîÄ M√âTODO MOVE TAREA
  // =============================
  moveTarea(tareaId: number, listaId: number) {
    console.log('üîÑ Moviendo tarea:', { tareaId, listaId });
    
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/tareas/${tareaId}/move`;
    
    return this.http.post(URL, { lista_id: listaId }, { headers }).pipe(
      tap((response: any) => {
        console.log('‚úÖ Respuesta del servidor:', response);
      }),
      catchError((error) => {
        console.error('‚ùå Error al mover tarea:', error);
        console.error('Status:', error.status);
        console.error('Error completo:', error.error);
        return this.handleError(error);
      })
    );
  }

  // =============================
  // üí¨ OBTENER TIMELINE
  // =============================
  getTimeline(tareaId: number) {
    console.log('üåê ===== INICIO getTimeline SERVICE =====');
    console.log('üåê Tarea ID:', tareaId);
    
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/tareas/${tareaId}/timeline`;
    
    console.log('üåê URL completa:', URL);
    console.log('üåê Headers:', headers.keys());
    
    return this.http.get(URL, { headers }).pipe(
      tap((response: any) => {
        console.log('‚úÖ ===== RESPUESTA getTimeline SERVICE =====');
        console.log('‚úÖ Response completo:', response);
        console.log('‚úÖ Timeline length:', response.timeline?.length || 0);
        console.log('‚úÖ Timeline items:', response.timeline);
      }),
      catchError((error) => {
        console.error('‚ùå ===== ERROR getTimeline SERVICE =====');
        console.error('‚ùå Status:', error.status);
        console.error('‚ùå Status Text:', error.statusText);
        console.error('‚ùå Error:', error.error);
        console.error('‚ùå Message:', error.message);
        console.error('‚ùå URL:', error.url);
        return this.handleError(error);
      })
    );
  }

  // =============================
  // ‚ûï AGREGAR COMENTARIO
  // =============================
  addComment(tareaId: number, content: string) {
    console.log('üí¨ ===== INICIO addComment SERVICE =====');
    console.log('üí¨ Tarea ID:', tareaId);
    console.log('üí¨ Content:', content);
    
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/tareas/${tareaId}/comentarios`;
    
    console.log('üí¨ URL:', URL);
    
    return this.http.post(URL, { content }, { headers }).pipe(
      tap((response: any) => {
        console.log('‚úÖ ===== RESPUESTA addComment SERVICE =====');
        console.log('‚úÖ Response:', response);
      }),
      catchError((error) => {
        console.error('‚ùå ===== ERROR addComment SERVICE =====');
        console.error('‚ùå Error completo:', error);
        return this.handleError(error);
      }),
      finalize(() => {
        console.log('üèÅ addComment finalizado');
        this.isLoadingSubject.next(false);
      })
    );
  }

  // =============================
  // ‚úèÔ∏è ACTUALIZAR COMENTARIO
  // =============================
  updateComment(tareaId: number, comentarioId: number, content: string) {
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/tareas/${tareaId}/comentarios/${comentarioId}`;
    
    return this.http.put(URL, { content }, { headers }).pipe(
      catchError(this.handleError),
      finalize(() => this.isLoadingSubject.next(false))
    );
  }

  // =============================
  // üóëÔ∏è ELIMINAR COMENTARIO
  // =============================
  deleteComment(tareaId: number, comentarioId: number) {
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/tareas/${tareaId}/comentarios/${comentarioId}`;
    
    return this.http.delete(URL, { headers }).pipe(
      catchError(this.handleError),
      finalize(() => this.isLoadingSubject.next(false))
    );
  }

  // =============================
  // üîÄ REORDENAR LISTAS
  // =============================
  reorderListas(listas: { id: number, orden: number }[]) {
    this.isLoadingSubject.next(true);
    const headers = this.getHeaders();
    const URL = `${URL_SERVICIOS}/listas/reorder`;
    
    console.log('üì¶ Enviando orden de listas:', listas);
    
    return this.http.post(URL, { listas }, { headers }).pipe(
      tap((response: any) => {
        console.log('‚úÖ Orden guardado:', response);
      }),
      catchError((error) => {
        console.error('‚ùå Error al guardar orden:', error);
        return this.handleError(error);
      }),
      finalize(() => this.isLoadingSubject.next(false))
    );
  }

  
}